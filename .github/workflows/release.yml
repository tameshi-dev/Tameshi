name: Release Build

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v0.1.0)'
        required: true
        type: string

permissions:
  contents: write
  packages: write

jobs:
  run_tests:
    name: Run Test Suite
    uses: ./.github/workflows/test.yml

  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: run_tests
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
          name: Release ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}
          draft: false
          prerelease: false
          body: |
            ## Tameshi ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}

            Multi-modal smart contract vulnerability scanner combining deterministic pattern matching with AI-powered semantic analysis.

            ### Features
            - Deterministic vulnerability detection across multiple IR and source representations
            - LLM-powered semantic analysis for complex vulnerability patterns
            - Correlation engine for cross-validating findings
            - Provenance tracking for audit trails

            ### Installation

            Download the appropriate binary for your platform below.

            **Linux (x86_64):**
            ```bash
            wget https://github.com/tameshi-dev/tameshi/releases/download/${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}/tameshi-linux-amd64
            chmod +x tameshi-linux-amd64
            sudo mv tameshi-linux-amd64 /usr/local/bin/tameshi
            ```

            **macOS (Intel):**
            ```bash
            wget https://github.com/tameshi-dev/tameshi/releases/download/${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}/tameshi-macos-amd64
            chmod +x tameshi-macos-amd64
            sudo mv tameshi-macos-amd64 /usr/local/bin/tameshi
            ```

            **macOS (Apple Silicon):**
            ```bash
            wget https://github.com/tameshi-dev/tameshi/releases/download/${{ github.event_name == 'workflow_dispatch' && github.event.inputs.tag || github.ref_name }}/tameshi-macos-arm64
            chmod +x tameshi-macos-arm64
            sudo mv tameshi-macos-arm64 /usr/local/bin/tameshi
            ```

            **Windows:**
            Download `tameshi-windows-amd64.exe` and add to your PATH.

            ### Documentation

            Visit [tameshi.dev](https://tameshi.dev) for full documentation.

  build_binaries:
    name: Build Binaries for ${{ matrix.target }}
    needs: [run_tests, create_release]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-musl
            asset_name_suffix: linux-amd64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name_suffix: windows-amd64
            ext: .exe
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name_suffix: macos-amd64
          - os: macos-14
            target: aarch64-apple-darwin
            asset_name_suffix: macos-arm64
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Rust for target ${{ matrix.target }}
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install musl-tools (Linux MUSL target only)
        if: matrix.os == 'ubuntu-latest' && contains(matrix.target, 'musl')
        run: |
          sudo apt-get update -y
          sudo apt-get install -y musl-tools

      - name: Build binary
        run: |
          cargo build --verbose --release --target ${{ matrix.target }} --package tameshi-cli --bin tameshi

      - name: Create archive
        shell: bash
        run: |
          mkdir -p dist

          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp ./target/${{ matrix.target }}/release/tameshi.exe dist/tameshi-${{ matrix.asset_name_suffix }}.exe
            cd dist
            7z a tameshi-${{ matrix.asset_name_suffix }}.zip tameshi-${{ matrix.asset_name_suffix }}.exe
            cd ..
          else
            cp ./target/${{ matrix.target }}/release/tameshi dist/tameshi-${{ matrix.asset_name_suffix }}
            cd dist
            tar czf tameshi-${{ matrix.asset_name_suffix }}.tar.gz tameshi-${{ matrix.asset_name_suffix }}
            cd ..
          fi

      - name: Upload binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/tameshi-${{ matrix.asset_name_suffix }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_name: tameshi-${{ matrix.asset_name_suffix }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}
          asset_content_type: application/octet-stream

      - name: Upload archive (Unix)
        if: matrix.os != 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/tameshi-${{ matrix.asset_name_suffix }}.tar.gz
          asset_name: tameshi-${{ matrix.asset_name_suffix }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload archive (Windows)
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./dist/tameshi-${{ matrix.asset_name_suffix }}.zip
          asset_name: tameshi-${{ matrix.asset_name_suffix }}.zip
          asset_content_type: application/zip

  build_docker:
    name: Build and Push Docker Image
    needs: create_release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest,enable=${{ github.event_name != 'workflow_dispatch' }}
            type=raw,value=${{ github.event.inputs.tag }},enable=${{ github.event_name == 'workflow_dispatch' }}
            type=raw,value=latest,enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
