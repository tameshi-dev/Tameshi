name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [created]
  workflow_dispatch:
  workflow_call:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-git-${{ hashFiles('**/Cargo.lock') }}

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-stable-${{ hashFiles('**/Cargo.lock') }}

    - name: Run tests
      run: cargo test --workspace --lib --verbose

    - name: Run doctests
      run: cargo test --doc --workspace

    - name: Check formatting
      if: matrix.os == 'ubuntu-latest'
      run: cargo fmt --all -- --check

    - name: Run clippy
      run: cargo clippy --workspace -- -D warnings

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-integration-${{ hashFiles('**/Cargo.lock') }}

    - name: Build release binary
      run: cargo build --release --workspace

    - name: Test CLI basic functionality
      run: |
        # Test that CLI binary exists and runs
        ./target/release/tameshi --version || exit 1
        ./target/release/tameshi --help || exit 1

  release-gate:
    name: Release Gate
    runs-on: ubuntu-latest
    needs: [test, integration-test]
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v'))

    steps:
    - name: All tests passed
      run: |
        echo "✅ All tests passed successfully!"
        echo "Release can proceed."

    - name: Check version consistency
      uses: actions/checkout@v4
    - run: |
        VERSION=$(grep '^version' crates/cli/Cargo.toml | head -1 | cut -d '"' -f 2)
        echo "Expected version: $VERSION"

        for cargo_file in crates/*/Cargo.toml; do
          FILE_VERSION=$(grep '^version' "$cargo_file" | head -1 | cut -d '"' -f 2)
          if [ "$FILE_VERSION" != "$VERSION" ]; then
            echo "❌ Version mismatch in $cargo_file: $FILE_VERSION != $VERSION"
            exit 1
          fi
        done

        echo "✅ All crates have consistent version: $VERSION"
